generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

model User {
    Id          String    @id @default(uuid()) @db.Uuid
    FirstName   String
    LastName    String
    Email       String
    PhoneNumber String
    Country     String
    Password    String
    Projects    Project[]
    Datasets    Dataset[]
}

model Project {
    Id                 String              @id @default(uuid()) @db.Uuid
    User               User                @relation(fields: [UserId], references: [Id])
    UserId             String              @db.Uuid
    Status             String
    Name               String              @unique
    CreatedAt          DateTime
    Cropping           Boolean
    SecretKey          String
    NeuralNetwork      NeuralNetwork       @relation(name: "Classification", fields: [NeuralNetworkId], references: [Id], map: "Project_Classification_fkey")
    NeuralNetworkId    String              @db.Uuid
    CroppingNetwork    NeuralNetwork?      @relation(name: "Cropping", fields: [CroppingNetworkId], references: [Id], map: "Project_Cropping_fkey")
    CroppingNetworkId  String?             @db.Uuid
    ArtifactPath       String
    Level              Int?
    Similarity         Int?
    Requests           Request[]
    Logs               Log[]
    ProjectProcessings ProjectProcessing[]
    Datasets           Dataset[]
}

model Request {
    Id                 String  @id @default(uuid()) @db.Uuid
    Project            Project @relation(fields: [ProjectId], references: [Id])
    ProjectId          String  @db.Uuid
    Images             Int
    ProcessingTime     Int
    ValidationTime     Int
    ClassifiactionTime Int
    CroppingTime       Int
    Quality            Float
}

model Log {
    Id        String  @id @default(uuid()) @db.Uuid
    Project   Project @relation(fields: [ProjectId], references: [Id])
    ProjectId String  @db.Uuid
    Value     String
}

model ProjectProcessing {
    Id        String  @id @default(uuid()) @db.Uuid
    Project   Project @relation(fields: [ProjectId], references: [Id])
    ProjectId String  @db.Uuid
    Value     String
}

model Dataset {
    Id           String    @id @default(uuid()) @db.Uuid
    Projects     Project[]
    User         User      @relation(fields: [UserId], references: [Id])
    UserId       String    @db.Uuid
    Name         String    @unique
    ImagesNum    Int
    Category     Category  @relation(fields: [CategoryId], references: [Id])
    CategoryId   String    @db.Uuid
    CreatedAt    DateTime
    ParentFolder String
    Source       Int
}

model NeuralNetwork {
    Id                     String    @id @default(uuid()) @db.Uuid
    ClassificationProjects Project[] @relation("Classification")
    CroppingProjects       Project[] @relation("Cropping")
    Category               Category  @relation(fields: [CategoryId], references: [Id])
    CategoryId             String    @db.Uuid
    KservePath             String
    LocalKserve            Boolean
    Model                  Model     @relation(fields: [ModelId], references: [Id])
    ModelId                String    @db.Uuid
}

model KServeUrl {
    Id         String   @id @default(uuid()) @db.Uuid
    Category   Category @relation(fields: [CategoryId], references: [Id])
    CategoryId String   @db.Uuid
    Model      Model    @relation(fields: [ModelId], references: [Id])
    ModelId    String   @db.Uuid
    UrlSuffix  String
}

model Category {
    Id             String          @id @default(uuid()) @db.Uuid
    Datasets       Dataset[]
    NeuralNetworks KServeUrl[]
    KServeUrls     NeuralNetwork[]
    Name           String
}

model Model {
    Id             String          @id @default(uuid()) @db.Uuid
    NeuralNetworks NeuralNetwork[]
    KServeUrls     KServeUrl[]
    Name           String
}
